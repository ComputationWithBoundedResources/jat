{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeSynonymInstances #-}

module Jat.PState.MemoryModel.Sharing
  (
  Sharing
  )
where

import Jat.JatM
import qualified Jat.PairSet as PS
import Jat.PState.AbstrValue
import Jat.PState.AbstrDomain as AD
import Jat.PState.Data
import Jat.PState.Fun
import Jat.PState.Frame
import Jat.PState.Heap
import Jat.PState.IntDomain
import Jat.PState.MemoryModel.Data
import Jat.PState.Object
import Jat.PState.Step
import Jat.Utils.Pretty
import Jat.Utils.Fun
import Jinja.Program (Var (..))
import qualified Jinja.Program as P

import qualified Data.Rewriting.Term as TRS (Term (..)) 

import Data.Maybe (fromMaybe)
import qualified Data.Map as M
import qualified Data.Set as S
import Control.Monad.State
import Data.List (find)

import Debug.Trace

mname :: String
mname = "Jat.PState.MemoryModel.Sharing"

merror :: String -> a
merror msg = error $ mname ++ msg

data NShare = Address :/=: Address deriving (Eq,Ord)
data MShare = Var :><: Var deriving (Eq,Ord)
data TreeSh = TS Var deriving (Eq,Ord)

type NShares = PS.PairSet Address
type MShares = PS.PairSet Var
type TreeShs = S.Set TreeSh

instance PS.Pair NShare Address where
  unview (a:/=:b) = (a,b)
  view            = uncurry (:/=:)

instance PS.Pair MShare Var where
  unview (a:><:b) = (a,b)
  view            = uncurry (:><:)

instance Pretty NShare where pretty (q:/=:r) = int q <> text "/=" <> int r
instance Show NShare   where show = show . pretty

instance Pretty MShare where pretty (x:><:y) = pretty x <> text "><" <> pretty y
instance Show MShare   where show = show . pretty

instance Pretty TreeSh where pretty (TS x) = char '^'<> pretty x
instance Show TreeSh   where show = show . pretty

data Sharing = Sh !Int !Int NShares MShares TreeShs 
type Sh i = PState i Sharing

instance Pretty Sharing where 
  pretty sh =
    (hsep . map pretty $ nShares' sh) <$>
    (hsep . map pretty $ mShares' sh) <$>
    (hsep . map pretty $ treeShs' sh)

instance Show Sharing where show = show . pretty

liftSh :: (Sharing -> Sharing) -> Sh i -> Sh i
liftSh f (PState hp frms sh) = PState hp frms (f sh)
liftSh _ st                  = st

nShares :: Sharing -> NShares
nShares (Sh _ _ ns _ _) = ns

mShares :: Sharing -> MShares
mShares (Sh _ _ _ ms _) = ms

treeShs :: Sharing -> TreeShs
treeShs (Sh _ _ _ _ ts) = ts

nShares' :: Sharing -> [NShare]
nShares' = PS.elems . nShares

mShares' :: Sharing -> [MShare]
mShares' = PS.elems . mShares

treeShs' :: Sharing -> [TreeSh]
treeShs' = S.elems . treeShs

liftNS :: (NShares -> NShares) -> Sharing -> Sharing
liftNS f (Sh i j ns ms ts) = Sh i j (f ns) ms ts

liftMS :: (MShares -> MShares) -> Sharing -> Sharing
liftMS f (Sh i j ns ms ts) = Sh i j ns (f ms) ts

liftTS :: (TreeShs -> TreeShs) -> Sharing -> Sharing
liftTS f (Sh i j ns ms ts) = Sh i j ns ms (f ts)

liftNS' :: (NShares -> a) -> Sharing -> a
liftNS' f = f . nShares

liftMS' :: (MShares -> a) -> Sharing -> a
liftMS' f = f . mShares

liftTS' :: (TreeShs -> a) -> Sharing -> a
liftTS' f = f . treeShs

unionMS :: Sharing -> Sharing -> Sharing
unionMS sh1 sh2 = (mShares sh1 `PS.union`) `liftMS` sh2

{-unionTS :: Sharing -> Sharing -> Sharing-}
{-unionTS sh1 sh2 = (treeShs sh1 `S.union`) `liftTS` sh2-}

{-unionSh :: Sharing -> Sharing -> Sharing-}
{-unionSh (Sh i j ns1 ms1 ts1) (Sh _ _ ns2 ms2 ts2) = Sh i j ns3 ms3 ts3-}
  {-where-}
    {-ns3 = ns1 `PS.union` ns2-}
    {-ms3 = ms1 `PS.union` ms2-}
    {-ts3 = ts1 `S.union`  ts2-}

emptySh :: Int -> Int -> Sharing
emptySh i j = Sh i j PS.empty PS.empty S.empty

initSh :: [AbstrValue i] -> Sharing
initSh loc = Sh 0 (-1) PS.empty ms ts
  where 
    iloc = zip [0..] loc
    ms   = PS.fromList [ LocVar 0 i:><:LocVar 0 i | (i,RefVal _) <- iloc ]
    ts   = S.fromList  [ TS (LocVar 0 i)          | (i,RefVal _) <- iloc ]

sharing :: Sh i -> Sharing
sharing (PState _ _ sh) = sh

-- TODO: generalize in Fun.hs
tyOf :: Sh i -> Address -> P.Type
tyOf st q = P.RefType . className $ lookupH q (heap st)

maybeShares :: P.Program -> Sh i -> Address -> Address -> Bool
maybeShares p st q r = 
  P.areSharingTypes p (tyOf st q) (tyOf st r) && 
  maybeSharesSh st q r

-- ? more exact if we require that (x:><:y) share if x reaches q and y reaches w
-- provide a reversed hp, ie return indices from given address
maybeSharesSh :: Sh i -> Address -> Address -> Bool
maybeSharesSh st q r = any pairShares (mShares' $ sharing st)
  where
    pairShares (x:><:y) =
      (q `elem` xReaches && r `elem` yReaches) ||
      (q `elem` yReaches && r `elem` xReaches)
      where
        xReaches = reachableV x st
        yReaches = reachableV y st

treeShapedSh :: Sh i -> Address -> Bool
treeShapedSh st q = any k (treeShs' $ sharing st)
  where k (TS x) = q `elem` reachableV x st

treeShaped :: P.Program -> Sh i -> Address -> Bool
treeShaped p st q = 
  treeShapedSh st q ||
  P.isTreeShapedType p (tyOf st q)

isValidStateTS :: Sh i -> Bool
isValidStateTS st@(PState hp _ _) = not $ any (treeShapedSh st) $ trace ("CYCLIC" ++ show nonts) nonts
  {-where nonts = (`isNotTreeShaped` hp) `filter` addresses hp-}
  where nonts = (`isCyclic` hp) `filter` addresses hp
isValidStateTS _ = True

maybeSharesV :: P.Program -> Sh i -> Var -> Var -> Bool
maybeSharesV p st x y =
  P.areSharingTypes p (typeV x st) (typeV y st) &&
  PS.member (x:><:y) `liftMS'` sharing st

{-treeShapedV :: P.Program -> Sh i -> Var -> Bool-}
{-treeShapedV p st x =-}
  {-P.isTreeShapedType p (typeV x st) &&-}
  {-S.member (TS x) `liftTS'` sharing st-}
  
unShare :: P.Program -> [Address] -> [Address] -> Sh i -> Sh i
unShare p qs rs st@(PState hp frms sh) = 
  PState hp frms (PS.union elems `liftNS` sh)
  where 
    elems       = PS.fromList [ q:/=:r | q <- qs, r <- rs, q /= r, related q r ]
    related q r = P.areRelatedTypes p (tyOf st q) (tyOf st r)

assignSh :: Var -> Var -> Sharing -> Sharing
assignSh x y = assignTS x y . assignMS x y

assignMS :: Var -> Var -> Sharing -> Sharing
assignMS x y sh =
  if PS.member (y:><:y) `liftMS'` sh
    then (PS.insert (x:><:y) `liftMS` sh') `unionMS` 
         (PS.renameWithLookup (`lookup` [(y,x)]) `liftMS` sh') 
    else sh'
  where sh' = PS.delete' x `liftMS` sh

assignTS :: Var -> Var -> Sharing -> Sharing
assignTS v w sh = 
  if S.member (TS w) `liftTS'` sh 
    then S.insert (TS v) `liftTS` sh
    else S.delete (TS v) `liftTS` sh

pushSh :: Sharing -> Sharing
pushSh (Sh i j ns ms ts) = Sh i (j+1) ns ms ts

putSh :: Sharing -> Sharing
putSh (Sh i j ns ms ts) = Sh i k ns ms' ts' 
  where
    k   = j+1
    ms' = StkVar i k `PS.insert'` ms
    ts' = TS (StkVar i k) `S.insert` ts

putTS :: Sharing -> Sharing
putTS (Sh i j ns ms ts) = Sh i k ns ms (TS (StkVar i k) `S.insert` ts)
  where k = j+1

{-popSh :: Sharing -> Sharing-}
{-popSh (Sh i j ns ms ts) = Sh i (j-1) ns ms ts-}

purgeSh :: Sharing -> Sharing
purgeSh (Sh i j ns ms ts) = Sh i (j-1) ns ms' ts'
  where
    ms' = StkVar i j `PS.delete'` ms
    ts' = TS (StkVar i j) `S.delete` ts

purgeTS :: Sharing -> Sharing
purgeTS (Sh i j ns ms ts) = Sh i (j-1) ns ms ts'
  where ts' = TS (StkVar i j) `S.delete` ts

stkSh :: Sharing -> Var
stkSh (Sh i j _ _ _) = StkVar i j

locSh :: Sharing -> Int -> Var
locSh (Sh i _ _ _ _) = LocVar i

updateSH :: P.Program -> P.PC -> P.Instruction -> Sh i -> Sh i
updateSH p _ ins st = updateSh' `liftSh` st
  where
    {-updateSh' (Sh i j _ _ _) | trace (show (i,j,ins)) False = undefined-}
    updateSh' sh = case ins of
      P.Push _         -> putTS sh
      P.Pop            -> purgeSh sh
      P.Load n         -> (\lsh -> (stkSh lsh `assignSh` locSh lsh n) lsh) $ pushSh sh
      P.Store n        -> purgeSh $ (locSh sh n `assignSh` stkSh sh) sh
      P.Goto _         -> sh 
      P.CheckCast _    -> purgeSh sh 
      P.IfFalse _      -> purgeTS sh
      P.IAdd           -> purgeTS sh
      P.ISub           -> purgeTS sh
      P.BAnd           -> purgeTS sh
      P.BOr            -> purgeTS sh
      P.BNot           -> sh
      P.ICmpGeq        -> purgeTS sh 
      P.CmpEq          -> putTS . purgeSh $ purgeSh sh 
      P.CmpNeq         -> putTS . purgeSh $ purgeSh sh
      P.New _          -> putSh sh

      P.GetField fn cn -> getFieldSh p cn fn st
      P.PutField _ _   -> sh 
      P.Return         -> returnSh st
      P.Invoke _  n    -> invokeSh n st

returnSh :: Sh i -> Sharing
returnSh (PState _ (frm1:_) (Sh i _ ns ms ts)) = 
  filterMS . filterTS $ assign sh1
  where
    len = length (opstk frm1) - 1
    sh1 = Sh (i-1) len ns ms ts
    assign = StkVar (i-1) len `assignSh` StkVar i 0
    filterMS = (PS.filter (\(p:><:q) -> k p && k q) `liftMS`)
    filterTS = (S.filter (\(TS q) -> k q)  `liftTS`)
    k (StkVar i2 _) = i2 < i
    k (LocVar i2 _) = i2 < i
returnSh (PState _ [] _) = emptySh 0 0

invokeSh :: Int -> Sh i -> Sharing
invokeSh n (PState _ _ (Sh i j ns ms ts)) = renameMS $ renameTS sh1
  where
    sh1 = Sh (i+1) (-1) ns ms ts
    renamer v = v `fromMaybe` lookup v (zip [StkVar i k | k <- [j,j-1..]] [LocVar (i+1) k | k <- [n,n-1..0]])
    renameMS = (PS.rename renamer `liftMS`)
    renamerTS v = v `fromMaybe` lookup v (zip [ TS (StkVar i k) | k <- [j,j-1..]] [ TS (LocVar (i+1) k) | k <- [n,n-1..0]])
    renameTS = (S.map renamerTS `liftTS`)
      
-- depends on updated state
getFieldSh :: P.Program -> P.ClassId -> P.FieldId -> Sh i -> Sharing
getFieldSh p cn fn = sharing . getFieldMS p ty . getFieldTS p ty
  where ty = snd $ P.field p cn fn

getFieldTS :: P.Program -> P.Type -> Sh i -> Sh i
getFieldTS p ty (PState hp frms sh) = PState hp frms sh'
  where sh' = if P.isTreeShapedType p ty then S.insert (TS $ stkSh sh) `liftTS` sh else sh

getFieldMS :: P.Program -> P.Type -> Sh i -> Sh i
getFieldMS p ty st@(PState hp frms sh@(Sh i j _ _ _)) = PState hp frms (PS.filter f `liftMS` sh)
  where 
    f (StkVar k l:><:y) | i == k && j == l = P.areSharingTypes p ty (typeV y st)
    f (y:><:StkVar k l) | i == k && j == l = P.areSharingTypes p (typeV y st) ty
    f _                 = True

normalizeMS :: P.Program -> Sh i -> Sharing
normalizeMS p st = PS.filter k `liftMS` sharing st 
  where k (x:><:y) = P.areSharingTypes p (typeV x st) (typeV y st)
  
instance MemoryModel Sharing where
  new       = newSH
  getField  = getFieldSH
  putField  = putFieldSH

  invoke    = invokeSH
  equals    = equalsSH
  nequals   = nequalsSH

  initMem   = initMemSH

  leq       =leqSH
  lub      = joinSH

  normalize = normalizeSH
  state2TRS = state2TRSSH
  update    = updateSH
  

newSH :: (Monad m, IntDomain i) => Sh i -> P.ClassId -> JatM m (PStep(Sh i))
newSH (PState hp (Frame loc stk cn mn pc :frms) sh) newcn = do
  p <- getProgram
  let obt       = mkInstance p newcn
      (adr,hp') = insertHA obt hp
      stk'      = RefVal adr :stk
      st1       = PState hp' (Frame loc stk' cn mn (pc+1) :frms) sh
      st2       = unShare p [adr] (addresses hp) st1
  return $ topEvaluation st2
newSH _ _ = merror ".new: unexpected case."

getFieldSH :: (Monad m, IntDomain i) => Sh i -> P.ClassId -> P.FieldId -> JatM m (PStep(Sh i))
getFieldSH st cn fn = case opstk $ frame st of
  Null :_         -> return $ topEvaluation (EState NullPointerException)
  RefVal adr : _  -> tryInstanceRefinement st adr |>> return (mkGetField st cn fn)
  _               -> error $ mname ++ ".getField: unexpected case."


putFieldSH :: (Monad m, IntDomain i) => Sh i -> P.ClassId -> P.FieldId -> JatM m (PStep(Sh i))
putFieldSH st@PState{} cn fn = case opstk $ frame st of
  _ : Null       : _ -> return $ topEvaluation (EState NullPointerException)
  _ : RefVal adr : _ -> tryInstanceRefinement st adr
                       |> tryEqualityRefinement st adr
                       |>> do
                       p <- getProgram
                       stp1 <- mkPutField undefined st cn fn
                       return $ case stp1 of
                          Evaluation (st1,con) -> 
                            let st2 = liftSh (const $ putFieldSh p cn fn st) st1
                                st3 = normalizeSH st2
                            in  if isValidStateTS st2 
                                  then Evaluation (st3,con) 
                                  else topEvaluation $ trace (show st2) $ EState IllegalStateException
                          stp -> stp
  _                  -> merror ".getField: unexpected case."


putFieldSh :: P.Program -> P.ClassId -> P.FieldId -> Sh i -> Sharing
putFieldSh p cn fn st = case sharing st of
  Sh i j ns _ _ -> purgeSh . purgeSh $ Sh i j ns ms ts
  where
    ms = putFieldMS p st
    ts = putFieldTS p cn fn st

putFieldTS :: P.Program -> P.ClassId -> P.FieldId -> Sh i -> TreeShs
putFieldTS p cn fn st@(PState _ _ sh@(Sh i j _ _ ts)) = ts'
  where 
    ts' = if P.isTreeShapedType p fieldTy || (tsval && not shares)
      then ts
      else ts `S.difference` sharesWith refvar ts
    fieldTy = snd $ P.field p cn fn
    tsval   = S.member (TS valvar) `liftTS'` sh
    shares  = maybeSharesV p st valvar refvar
    valvar  = StkVar i j
    refvar  = StkVar i (j-1)
    sharesWith x = S.fold k S.empty
      where k (TS y) xs = if maybeSharesV p st x y then TS y `S.insert` xs else xs

putFieldMS :: P.Program -> Sh i -> MShares
putFieldMS p (PState hp frms sh@(Sh i j _ ms _)) = mShares $ normalizeMS p (PState hp frms sh')
  where 
    (val,ref) = (StkVar i j, StkVar i (j-1))
    sh'       = const ms' `liftMS` sh
    ms'       = PS.closure [ref] . PS.delete' val . PS.closure [val] $ PS.insert (ref:><:val) ms

invokeSH :: (Monad m, IntDomain i) => Sh i -> P.MethodId -> Int -> JatM m (PStep(Sh i))
invokeSH st1 mn1 n1 = do
  p <- getProgram
  invoke' p st1 mn1 n1
  where
    invoke' p st@(PState hp (Frame loc stk fcn fmn pc :frms) sh) mn n =
      case rv  of
        Null     -> return . topEvaluation $ EState NullPointerException
        RefVal q -> tryInstanceRefinement st q
                  |>> return (topEvaluation $ PState hp (frm:Frame loc stk2 fcn fmn pc:frms) sh)
        _        -> merror ".invoke: invalid type on stack"
      where
        (ps,stk1)   = splitAt n stk
        ([rv],stk2) = splitAt 1 stk1
        cn1         = className $ lookupH (theAddress rv) hp
        (cn2,mb)    = P.seesMethodIn p cn1 mn
        mxl         = P.maxLoc mb
        frm         = Frame (initL (rv:reverse ps) mxl) [] cn2 mn 0
    invoke' _ _ _ _ = error ".inoke: exceptional case."

tryInstanceRefinement :: (Monad m, IntDomain i) => Sh i -> Address -> JatM m (Maybe (PStep(Sh i)))
tryInstanceRefinement st@(PState hp _ _) q = case lookupH q hp of
    AbsVar _     -> getProgram >>= \p -> Just `liftM` instanceRefinement p st q
    Instance _ _ -> return Nothing
tryInstanceRefinement _ _ = merror ".tryInstanceRefinement: exceptional case."

instanceRefinement :: (Monad m, IntDomain i) => P.Program -> Sh i -> Address -> JatM m (PStep(Sh i))
instanceRefinement p st@(PState hp frms sh) adr = do
  instances <- instancesM
  nullref   <- nullM
  return . topRefinement $ nullref:instances
  where
    cns  = P.subClassesOf p . className $ lookupH adr hp
    obtM = mapM (mkAbsInstance hp adr) cns

    instancesM = map mkInstanceM `liftM` obtM
      where mkInstanceM (hp1,obt1) = let hp2 = updateH adr obt1 hp1 in PState hp2 frms sh
    nullM      = return $ substituteSh st
    substituteSh st1 = liftNS (PS.delete' adr) `liftSh` substitute (RefVal adr) Null st1

tryEqualityRefinement :: (Monad m, IntDomain i) => Sh i -> Address -> JatM m (Maybe(PStep(Sh i)))
tryEqualityRefinement st@(PState hp _ _) q = do
  p <- getProgram
  case find (maybeEqual p st q) (addresses hp) of
    Just r  -> Just `liftM` equalityRefinement st q r
    Nothing -> return Nothing

-- rename also TreeShaped q
equalityRefinement :: (Monad m, IntDomain i) => Sh i -> Address -> Address -> JatM m (PStep(Sh i))
equalityRefinement st@(PState hp frms sh) q r = do
  p <- getProgram
  return . topRefinement $ if isValidStateTS mkEqual && leqSH p mkEqual st then [mkEqual, mkNequal] else [mkNequal]
  where
    mkEqual  = liftNS (PS.renameWithLookup (`lookup` [(r,q)]))`liftSh` substitute (RefVal r) (RefVal q) st
    mkNequal = PState hp frms (PS.insert (r:/=:q) `liftNS` sh)

maybeEqual :: IntDomain i => P.Program -> Sh i -> Address -> Address -> Bool
maybeEqual p st q r = 
  q/=r                                          && 
  not (PS.member (q:/=:r) `liftNS'` sharing st) && 
  maybeShares p st q r

equalsSH :: (Monad m, IntDomain i) => Sh i -> JatM m (PStep(Sh i))
equalsSH st@(PState hp (Frame loc (v1:v2:stk) cn mn pc :frms) sh) =
  getProgram >>= \p -> equalsx p v1 v2
  where
    equalsx _ (RefVal q) (RefVal r) | q == r = mkBool True
    equalsx _ (RefVal q) (RefVal r) | PS.member (q:/=:r) `liftNS'` sh = mkBool False
    equalsx p (RefVal q) (RefVal r) =
      if maybeEqual p st q r
         then equalityRefinement st q r
         else mkBool False
    equalsx _ (RefVal q) Null =
      tryInstanceRefinement st q |>> mkBool False
    equalsx _ Null (RefVal r) =
      tryInstanceRefinement st r |>> mkBool False
    equalsx _ _ _ = merror ".equals: unexpected case."
    mkBool b = return . topEvaluation $ PState hp (Frame loc stk' cn mn (pc+1):frms) sh
      where stk' = BoolVal (AD.constant b) : stk
equalsSH _ = merror ".equals: exceptional case."

nequalsSH :: (Monad m, IntDomain i) => Sh i -> JatM m (PStep(Sh i))
nequalsSH st@(PState hp (Frame loc (v1:v2:stk) cn mn pc :frms) sh) =
  getProgram >>= \p -> nequalsx p v1 v2
  where
    nequalsx _ (RefVal q) (RefVal r) | q == r = mkBool False
    nequalsx _ (RefVal q) (RefVal r) | PS.member (q:/=:r) `liftNS'` sh = mkBool True
    nequalsx p (RefVal q) (RefVal r) =
      if maybeEqual p st q r
         then equalityRefinement st q r
         else mkBool True
    nequalsx _ (RefVal q) Null =
      tryInstanceRefinement st q |>> mkBool True
    nequalsx _ Null (RefVal r) =
      tryInstanceRefinement st r |>> mkBool True
    nequalsx _ _ _ = merror ".nequals: unexpected case."
    mkBool b = return . topEvaluation $ PState hp (Frame loc stk' cn mn (pc+1):frms) sh
      where stk' = BoolVal (AD.constant b) : stk
nequalsSH _ = merror ".nequals: exceptional case."

initMemSH :: (Monad m, IntDomain i) => P.ClassId -> P.MethodId -> JatM m (Sh i)
initMemSH cn mn = do
  p <- getProgram
  let m = P.theMethod p cn mn
  (hp1,_)      <- mkAbsInstance emptyH 0 cn
  (hp2,params) <- foldM defaultAbstrValue (hp1,[]) (P.methodParams m)
  let loc = initL (RefVal 0:params) $ P.maxLoc m
      as  = addresses hp2
      st1 = PState hp2 [Frame loc [] cn mn 0] (initSh loc)
      st2 = unShare p as as st1
  return st2
  where
    defaultAbstrValue (hp,params) ty = case ty of
      P.BoolType    -> AD.top >>= \b -> return (hp, params++[BoolVal b])
      P.IntType     -> AD.top >>= \i -> return (hp, params++[IntVal i])
      P.NullType    ->                  return (hp, params++[Null])
      P.Void        ->                  return (hp, params++[Unit])
      P.RefType cn' ->                  return (hp',params++[RefVal r])
        where (r, hp') = insertHA (AbsVar cn') hp

newtype M i = M {  
    unMorph      :: M.Map (AbstrValue i) (AbstrValue i)
  }
type Morph i = State (M i)

emptyMorph :: M i
emptyMorph = M{unMorph=M.empty}

{-withMorph :: (M.Map Address Address -> M.Map Address Address) -> Morph a -> Morph a-}
{-withMorph f = withState (\x -> x{unMorph=f(unMorph x)})-}

modifyMorph :: (M.Map (AbstrValue i) (AbstrValue i) -> M.Map (AbstrValue i) (AbstrValue i)) -> Morph i ()
modifyMorph f = modify $ \x -> x{unMorph=f(unMorph x)}

leqSh1 :: (AbstrValue i -> Maybe (AbstrValue i)) -> Sharing -> Sharing -> Bool
leqSh1 lookup' (Sh i1 j1 ns1 ms1 ts1) (Sh i2 j2 ns2 ms2 ts2) | i1 == i2 && j1 == j2 =
  ns2' `PS.isSubsetOf` ns1 && 
  ms1  `PS.isSubsetOf` ms2 && 
  ts2  `S.isSubsetOf`  ts1
  where
    ns2' = PS.fold k PS.empty ns2
    k (q:/=:r) = case (lookup' (RefVal q), lookup' (RefVal r)) of
      (Just (RefVal q'), Just (RefVal r')) -> PS.insert (q':/=:r') 
      _                  -> id
leqSh1 _ (Sh i1 j1 _ _ _) (Sh i2 j2 _ _ _) = error $ "leqSh1" ++ show (i1,j1,i2,j2)
    

-- leqSH tries to find a mapping from addresses/variables to values, performing a 'parallel' preorder traversal, respecting the instance relation
-- difference to definition 5.4:
-- all null values have distinct implicit references in 5.4
-- nevertheless it's fine if (references of) class variables are mapped to multiple null values
-- ie t(cn_1,cn_1) [c_1 -> null] = t(null,null) as desired
leqSH :: IntDomain i => P.Program -> Sh i -> Sh i -> Bool
leqSH p (PState hp1 frms1 sh1) (PState hp2 frms2 sh2) =
  let (leqFrms,morph) = runState runFrms emptyMorph in
  let b1 = leqFrms
      b2 = leqSh1 (flip M.lookup $ unMorph morph) sh1 sh2
  in  b1 && b2
  where
    runFrms = and `liftM` zipWithM leqValM (concatMap elemsF frms1) (concatMap elemsF frms2)

    {-leqValM :: AbstrValue i -> AbstrValue i -> Morph i Bool-}
    leqValM Unit _                  = return True
    leqValM Null Null               = return True
    leqValM (BoolVal a) (BoolVal b) | isConstant b = return $ a == b
    leqValM (IntVal i)  (IntVal j)  | isConstant j = return $ i == j

    leqValM Null v2@(RefVal r)
      | not (isInstance (lookupH r hp2)) = fromMaybe True `liftM` validMapping v2 Null

    -- liftM2 is strict in the first component !
    leqValM v1@(RefVal q) v2@(RefVal r) = do 
      bM <- validMapping v2 v1
      case bM of
        Just b  -> return b
        Nothing -> leqObjM (lookupH q hp1) (lookupH r hp2)

    leqValM v1@(BoolVal a) v2@(BoolVal b) = fromMaybe (a `AD.leq` b) `liftM` validMapping v2 v1
    leqValM v1@(IntVal i)  v2@(IntVal j)  = fromMaybe (i `AD.leq` j) `liftM` validMapping v2 v1
    leqValM _ _                           = return False

    {-validMapping :: AbstrValue i -> AbstrValue i -> Morph i (Maybe Bool)-}
    validMapping v2 v1 = do
      mapping <- gets unMorph
      case M.lookup v2 mapping of
        Just v1'-> return $ Just (v1 == v1')
        Nothing -> modifyMorph (M.insert v2 v1) >> return Nothing

    {-leqObjM :: Object i -> Object i -> Morph i Bool-}
    leqObjM (Instance cn ft) (Instance cn' ft') = (cn == cn' &&) `liftM`  leqFtM ft ft'
    leqObjM (Instance cn _) (AbsVar cn')        = return $ P.isSuber p cn cn'
    leqObjM (AbsVar cn) (AbsVar cn')            = return $ P.isSuber p cn cn'
    leqObjM _ _                                 = return False

    {-leqFtM :: FieldTable i -> FieldTable i -> Morph i Bool-}
    leqFtM ft ft' = and `liftM` zipWithM leqValM (elemsFT ft) (elemsFT ft')

-- Todo: take correlation into account
joinSH :: (Monad m, IntDomain i) => Sh i -> Sh i -> JatM m (Sh i)
joinSH st1@(PState _ _ sh1@(Sh i j _ _ _)) st2@(PState _ _ sh2) = do
  p <- getProgram
  PState hp frms _  <- mergeStates p st1 st2 (emptySh i j)
  let ns = PS.empty
      ms = mShares sh1 `PS.union` mShares sh2
      ts = treeShs sh1 `S.intersection` treeShs sh2
      sh = Sh i j ns ms ts
  return $ PState hp frms sh

{-unifiesObjectsM :: IntDomain i => P.Program -> PState i Sharing -> PState i Sharing -> Object i -> Object i -> Morph Bool-}
{-[>unifiesOjects b p s t o1 o2 | trace (">>> unifiesO\n" ++ (show $ pretty o1 <+> pretty o2)) False = undefined<]-}
{-unifiesObjectsM p s t (Instance cn ft) (Instance cn' ft') = (cn == cn' &&) `liftM`  unifiesFTablesM p s t ft ft'-}
{-unifiesObjectsM p _ _ (AbsVar cn) (Instance cn' _)        = return $ P.isSuper p cn cn'-}
{-unifiesObjectsM p _ _ (AbsVar cn) (AbsVar cn')            = return $ P.isSuper p cn cn'-}
{-unifiesObjectsM _ _ _ _ _                                 = return False-}

{-unifiesFTablesM :: IntDomain i => P.Program -> PState i Sharing -> PState i Sharing -> FieldTable i -> FieldTable i -> Morph Bool-}
{-unifiesFTablesM p s t ft ft' = and `liftM` zipWithM (unifiesValuesM p s t) (elemsFT ft) (elemsFT ft')-}

state2TRSSH :: (Monad m, IntDomain i) => Maybe Address -> Sh i -> Int -> JatM m (TRS.Term String String)
state2TRSSH m st@PState{} n = getProgram >>= \p -> pState2TRS (isSpecial p) (isJoinable p st) m st n
  where
    {-isSpecial p adr = isCyclic adr hp || isNotTreeShaped  adr hp || not (treeShaped p st adr)-}
    isSpecial p adr = not (treeShaped p st adr)
    isJoinable      = maybeShares
state2TRSSH m st n = pState2TRS undefined undefined m st n

normalizeSH :: Sh i -> Sh i
normalizeSH (PState hp frms (Sh i j ns ms ts)) = PState hp' frms (Sh i j (PS.filter k ns) ms ts)
   where
     refsFS = [ r | RefVal r <- concatMap elemsF frms]
     hp'    = normalizeH refsFS hp
     refsH  = addresses hp'
     k (q:/=:r) = q `elem` refsH && r `elem` refsH
normalizeSH st = st





